generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql" // ? postgres
  // provider             = "mysql" // ! mysql
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id       String  @id @default(cuid())
  username String  @unique
  email    String? @unique
  name     String?
  password String
  image    String?
  locked   RowLock @default(UNLOCKED)
  locker   String?
  role     Role    @default(TECHNICIAN)

  @@index([username])
}

enum Role {
  TECHNICIAN
  RECEPTION
  ADMIN
}

model Product {
  id            String  @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  product_model String  @unique
  product_brand String?
  product_type  String?
  locked        RowLock @default(UNLOCKED)
  locker        String?
  Jobs          Job[]
  Parts         Part[]

  @@index([product_model])
}

model Client {
  id           String       @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  name         String       @unique
  address      String?      @db.Text // ? postgres
  // address      String?      @db.MediumText // ! mysql
  observations String?      @db.Text // ? postgres
  // observations String?      @db.MediumText // ! mysql
  contact      String?      @db.Text // ? postgres
  // contact      String?      @db.MediumText // ! mysql
  phone_number String?      @db.Text // ? postgres
  // phone_number String?      @db.MediumText // ! mysql
  status       String?
  type         String?
  wilaya       String?
  locked       RowLock      @default(UNLOCKED)
  locker       String?
  Entries      Entry[]
  Jobs         Job[]
  Deliveries   Delivery[]
  Prestations  Prestation[]

  @@index([name])
}

model Entry {
  id           String    @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  entry_id     String    @unique
  observations String?   @db.Text // ? postgres 
  // observations String?   @db.MediumText // ! mysql
  entry_date   DateTime? @db.Date
  entry_time   String?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  clientId     String
  client       Client    @relation(fields: [clientId], references: [id])
  Jobs         Job[]
  locked       RowLock   @default(UNLOCKED)
  locker       String?

  @@index([entry_id, entry_date])
}

model Job {
  id                    String    @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  job_id                Int       @unique
  entryId               String
  entry                 Entry     @relation(fields: [entryId], references: [id])
  clientId              String
  client                Client    @relation(fields: [clientId], references: [id])
  productId             String
  product               Product   @relation(fields: [productId], references: [id])
  prestation_id         String?
  awaiting_intervention String?
  warranty              String?
  repaired_date         DateTime? @db.Date
  exit_date             DateTime? @db.Date
  designation           String?   @db.Text // ? postgres 
  // designation           String? @db.MediumText // ! mysql
  diagnostics           String?   @db.Text // ? postgres 
  // diagnostics            String? @db.MediumText // ! mysql
  status                String?   @db.Text // ? postgres 
  // status                String? @db.MediumText // ! mysql
  serial_number         String?   @db.Text // ? postgres 
  // serial_number         String? @db.MediumText // ! mysql
  new_serial_number     String?   @db.Text // ? postgres 
  // new_serial_number     String? @db.MediumText // ! mysql
  localisation          String?
  technician            String?
  entry_subid           Int?
  product_same_model    String?
  used_parts            String?
  spare_parts           String?
  rma_asus              String?
  locked                RowLock   @default(UNLOCKED)
  locker                String?

  @@index([job_id])
}

model Delivery {
  id               String    @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  delivery_id      String    @unique
  delivery_date    DateTime? @db.Date
  clientId         String
  client           Client    @relation(fields: [clientId], references: [id])
  delivery_content String?
  entry_id         String?
  sage_exit_id     String?
  date_delivered   DateTime? @db.Date
  observations     String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  locked           RowLock   @default(UNLOCKED)
  locker           String?

  @@index([delivery_id])
}

model Order {
  id            String    @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  order_id      String    @unique
  order_content String?   @db.Text // ? postgres 
  // order_content String?   @db.MediumText // ! mysql
  observations  String?   @db.Text // ? postgres 
  // observations  String?   @db.MediumText // ! mysql
  order_date    DateTime? @db.Date
  receipt_date  DateTime? @db.Date
  sage_entry_id String?
  quantity      Int?
  payment       String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  locked        RowLock   @default(UNLOCKED)
  locker        String?

  @@index([order_id])
}

model Prestation {
  id                String              @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  prestation_id     String              @unique
  prestation_date   DateTime?           @db.Date
  clientId          String
  client            Client              @relation(fields: [clientId], references: [id])
  observations      String?             @db.Text // ? postgres 
  // observations      String?             @db.MediumText // ! mysql
  is_paid           Boolean             @default(false)
  to_bill           Boolean             @default(false)
  recovery_date     DateTime?           @db.Date
  payment_date      DateTime?           @db.Date
  invoice           String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  PrestationDetails PrestationDetails[]
  Transactions      Transaction[]
  locked            RowLock             @default(UNLOCKED)
  locker            String?

  @@index([prestation_id])
}

model PrestationDetails {
  id           String     @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  prestationId String
  prestation   Prestation @relation(fields: [prestationId], references: [id])
  designation  String?
  price_ht     Float?
  price_ttc    Float?
  quantity     Int?
  subtotal     Float?
  total_amount Float?
  locked       RowLock    @default(UNLOCKED)
  locker       String?
}

model Config {
  id                     String @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  current_entries_id     String
  current_deliveries_id  String
  current_orders_id      String
  current_prestations_id String
  current_jobs_id        Int
  current_balance        Int
}

model Transaction {
  id           String          @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  date         DateTime        @default(now()) @db.Date
  updatedAt    DateTime?       @updatedAt @db.Date
  type         TransactionType
  title        String?
  prestationId String?
  prestation   Prestation?     @relation(fields: [prestationId], references: [id])
  amount       Int
  locked       RowLock         @default(UNLOCKED)
  locker       String?
}

enum TransactionType {
  INCOME
  EXPENSE
  CHEQUE
}

enum RowLock {
  LOCKED
  UNLOCKED
}

model Part {
  id          String  @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  name        String
  description String?
  image       String?
  price       Int     @default(0)

  Stock Stock[]
}

model Stock {
  id        String    @id @default(cuid()) // ? postgres
  // id           Int       @id @default(autoincrement()) // ! mysql
  date      DateTime  @default(now()) @db.Date
  updatedAt DateTime? @updatedAt @db.Date
  partId    String
  part      Part      @relation(fields: [partId], references: [id])
  quantity  Int       @default(0)
  ok        Int       @default(0)
  hs        Int       @default(0)
  locked       RowLock         @default(UNLOCKED)
  locker       String?
}
